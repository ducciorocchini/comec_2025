---
title: "Visualizing Earth's pulse: ridgeline plots for satellite data analysis"
author: Duccio Rocchini
format:
  revealjs:
    self-contained: true
editor: visual
---

## Motivation

There is a growing need for innovative visual methods to decode Earth’s **“pulse”**

![](../images/landsat_gee.png){fig-width="60%" fig-align="center"}

## Problem Statement

How can we intuitively **visualize** long-term environmental changes across regions?

Need for techniques that highlight **temporal structure** while retaining spatial identity

![](../images/bcube.png){fig-align="center" width="70%"}

## Aim

-   Utilize temporal **ridgeline plots** to summarize satellite-derived time series
-   Leverage **R** powerful geospatial and visualization libraries (e.g., `ggplot2`, `ggridges`, `terra`)
-   Enable **comparative analysis** across years, locations, and environmental variables
-   **Communicate** complex data trends with clarity and aesthetic appeal

## The imageRy package

```{r imagery, echo = TRUE}
library(imageRy)
citation("imageRy")
```

## Drone images

```{r droneo, echo = TRUE}
#| fig-align: "center"
library(terra)
droneo=rast("../images/orto.png")
droneo=flip(droneo)
plotRGB(droneo, 1, 2, 3)
```

## Single layer

```{r layer, echo = F, eval = T}
#| fig-align: "center"
library(terra)
plot(droneo[[1]])
```

## Ridgeline plot

```{r ridgedroneo, echo = F, eval = T}
#| fig-align: "center"
library(ggplot2)
library(ggridges)
library(imageRy)
im.ridgeline(droneo[[3]], scale=40)
```

## The first ridgeline plot

Antoine de Saint-Exupéry, Le Petit Prince:

![](../images/first_ridgeline.jpeg){fig-align="center" width="70%"}

## Wider scales

```{r ridge, echo = TRUE}
#| fig-align: "center"
library(imageRy)
library(terra)
ex=im.import("Sentinel2_NDVI_2020-02-21.tif")
plot(ex)
```

## Ridgelines at wider scales

```{r ridgel, echo = TRUE, messages = FALSE}
#| fig-align: "center"
library(ggplot2)
library(ggridges)
im.ridgeline(ex, scale=2, palette="viridis")
```

## The algorithm

::: {style="text-align: center;"}
\centering

$\omega1 = \begin{bmatrix}
\lambda_{1_{\omega1}} & \lambda_{2_{\omega1}} & \lambda_{3_{\omega1}}\\
\lambda_{4_{\omega1}} & \lambda_{5_{\omega1}} & \lambda_{6_{\omega1}}\\
\lambda_{7_{\omega1}} & \lambda_{8_{\omega1}} & \lambda_{9_{\omega1}}
\end{bmatrix}$

$\omega2 = \begin{bmatrix}
\lambda_{1_{\omega2}} & \lambda_{2_{\omega2}} & \lambda_{3_{\omega2}}\\
\lambda_{4_{\omega2}} & \lambda_{5_{\omega2}} & \lambda_{6_{\omega2}}\\
\lambda_{7_{\omega2}} & \lambda_{8_{\omega2}} & \lambda_{9_{\omega2}}
\end{bmatrix}$

$\omega3 =
\begin{bmatrix}
\lambda_{1_{\omega3}} & \lambda_{2_{\omega3}} & \lambda_{3_{\omega3}}\\
\lambda_{4_{\omega3}} & \lambda_{5_{\omega3}} & \lambda_{6_{\omega3}}\\
\lambda_{7_{\omega3}} & \lambda_{8_{\omega3}} & \lambda_{9_{\omega3}}
\end{bmatrix}$
:::

## Converting the data to a dataframe

```{r data, echo = TRUE, eval = FALSE}
df = as.data.frame(img)
df
```

::: {style="text-align: center;"}
![](../images/ridgeline_tab.png){fig-align="center" width="50%"}
:::

## tidyverse mode

```{r tidy, echo = TRUE, eval = FALSE}
df = as.data.frame(img, wide=F)
df
```

::: {style="text-align: center;"}
![](../images/ridgeline_tidy.png){fig-align="center" width="30%"}
:::

## Example

```{r imageRy, echo = TRUE}
#| fig-align: "center"
ndvi = im.import("Sentinel2")
plot(ndvi)
```

## NDVI data

```{r ndvi, echo = TRUE}
#| fig-align: "center"
ndvi
```

## Ridgeline plots

```{r ridgeline, echo=TRUE, message=FALSE}
#| fig-align: "center"
names(ndvi) = c("02_feb", "05_may", "08_aug", "11_nov")
im.ridgeline(ndvi, scale=1)
```

## Scale parameter

```{r scale, echo=TRUE, message=FALSE}
#| fig-align: "center"
names(ndvi) = c("02_feb", "05_may", "08_aug", "11_nov")
im.ridgeline(ndvi, scale=2)
```

## RGB drone imagery

Drone image for the Uccellina zone, University of Siena:

```{r drone, echo = FALSE, warning = FALSE, message = FALSE}
#| fig-align: "center"
library(terra)
drone = rast("/Users/ducciorocchini/Documents/lectures_and_seminars/images/uccellina.png")
dron=flip(drone)
plotRGB(drone)
```

## Ridgeline plots with drone data

```{r ridgedrone, echo = TRUE, warning = FALSE, message = FALSE}
#| fig-align: "center"
im.ridgeline(drone, scale=2)
```

## Putting NA values

```{r dronena, echo = TRUE, warning = FALSE, message = FALSE}
#| fig-align: "center"
drone[drone > 250] = NA
plotRGB(drone)
```

## Ridgeline plots with drone data - NA values in

```{r ridgedronena, echo = TRUE, warning = FALSE, message = FALSE}
#| fig-align: "center"
im.ridgeline(drone, scale=2)
```

## Light reflectance effects

```{r garden, echo = T, warning = FALSE, message = FALSE}
#| fig-align: "center"
library(terra)
day = rast("../images/giorno.jpeg")
night = rast("../images/notte.jpeg")
par(mfrow=c(1,2))
plot(flip(day))
plot(flip(night))
```

## Ridgeline plots under different light conditions

```{r ridgegarden, echo = T, warning = FALSE, message = FALSE}
#| fig-align: "center"
library(ggplot2)
library(ggridges)
c3 = c(day[[3]], night[[3]])
im.ridgeline(c3, scale=2)
```

## Species distributions

::: {style="text-align: center;"}
![](../images/rocio_decreasing.png){fig-align="center"}
:::

## Ridgeline plots for species distributions

::: {style="text-align: center;"}
![](../images/rocio_decreasing_ridge.png){fig-align="center"}
:::

## Increasing ranges

::: {style="text-align: center;"}
![](../images/rocio_increasing.png){fig-align="center"}
:::

## Ridgeline plots for increasing ranges

::: {style="text-align: center;"}
![](../images/rocio_increasing_ridge.png){fig-align="center"}
:::

## Colorblindness

```{r colorblindness, echo = T, warning = FALSE, message = FALSE}
im.ridgeline
```

## Color ramps

[Viridis package](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)

::: {style="text-align: center;"}
![](../images/viridis.png){fig-align="center"}
:::

## The cblindplot package

```{r cblindplot, echo = T, warning = FALSE, message = FALSE}
#| fig-align: "center"
library(cblindplot)
citation("cblindplot")
```

## Good practices for colorblindness

::: {style="text-align: center;"}
![](../images/environmetrics.png){fig-align="center"}
:::

## Coda

`im.ridgeline()` will:

-   Enhance **interpretability** of dense satellite datasets
-   Foster **reproducibility** and **scalability** through open-source tools in R

## Many thanks!

Contact:

Duccio Rocchini, PhD

Full Professor at: BIOME Lab, University of Bologna, Italy

[duccio.rocchini\@unibo.it](mailto:duccio.rocchini@unibo.it){.email}

The presentation was developed using R, Markdown, and Quarto. The open-source code is available at: <https://github.com/ducciorocchini/comec_2025>
